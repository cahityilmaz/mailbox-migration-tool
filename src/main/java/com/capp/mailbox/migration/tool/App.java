package com.capp.mailbox.migration.tool;

import com.formdev.flatlaf.*;
import com.formdev.flatlaf.extras.FlatAnimatedLafChange;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

/**
 * @author mucahit.yilmaz
 */
public class App extends javax.swing.JFrame {

    private static final Logger LOG = LoggerFactory.getLogger(App.class);

    private ExecutorService executorService;

    private MigrationTaskMonitor taskMonitor;

    /**
     * Creates new form App
     */
    public App() {
        initComponents();
        addDarkModeButtonToMenuBar();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dryRunBtn = new javax.swing.JButton();
        startMigrationBtn = new javax.swing.JButton();
        fastMigrationChk = new javax.swing.JCheckBox();
        javax.swing.JScrollPane listScroll = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        threadCountSpinner = new javax.swing.JSpinner();
        javax.swing.JLabel threadCountLbl1 = new javax.swing.JLabel();
        javax.swing.JLabel threadCountLbl2 = new javax.swing.JLabel();
        optionsPanel = new javax.swing.JPanel();
        javax.swing.JLabel sourceHostLbl = new javax.swing.JLabel();
        sourceHostTf = new javax.swing.JTextField();
        javax.swing.JLabel sourcePortLbl = new javax.swing.JLabel();
        sourcePortCmb = new javax.swing.JComboBox<>();
        javax.swing.JLabel sourceTlsOptionLbl = new javax.swing.JLabel();
        sourceTlsCmb = new javax.swing.JComboBox<>();
        javax.swing.JLabel targetHostLbl = new javax.swing.JLabel();
        targetHostTf = new javax.swing.JTextField();
        javax.swing.JLabel targetPortLbl = new javax.swing.JLabel();
        targetPortCmb = new javax.swing.JComboBox<>();
        javax.swing.JLabel targetTlsOptionLbl = new javax.swing.JLabel();
        targetTlsCmb = new javax.swing.JComboBox<>();
        loadCsvBtn = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mailbox Migration Tool");
        setIconImage(Toolkit.getDefaultToolkit().createImage(getClass().getResource("icon.png")));
        setMinimumSize(new java.awt.Dimension(1200, 600));

        dryRunBtn.setText("Dry run");
        dryRunBtn.putClientProperty(FlatClientProperties.STYLE_CLASS, "migbtn");
        dryRunBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dryRunBtnActionPerformed(evt);
            }
        });

        startMigrationBtn.setText("Start Migration");
        startMigrationBtn.putClientProperty(FlatClientProperties.STYLE_CLASS, "migbtn");
        startMigrationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startMigrationBtnActionPerformed(evt);
            }
        });

        fastMigrationChk.setSelected(true);
        fastMigrationChk.setText("Fast Migration (Size calculations and statistics will not be performed!)");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.getTableHeader().setReorderingAllowed(false);
        listScroll.setViewportView(table);

        threadCountSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 50, 1));

        threadCountLbl1.setText("Process ");

        threadCountLbl2.setText("account at the same time");

        optionsPanel.setLayout(new java.awt.GridBagLayout());

        sourceHostLbl.setText("Source Host");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
        optionsPanel.add(sourceHostLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
        optionsPanel.add(sourceHostTf, gridBagConstraints);

        sourcePortLbl.setText("Source Port");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
        optionsPanel.add(sourcePortLbl, gridBagConstraints);

        sourcePortCmb.setEditable(true);
        sourcePortCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "143", "993" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
        optionsPanel.add(sourcePortCmb, gridBagConstraints);

        sourceTlsOptionLbl.setText("Source Tls Option");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
        optionsPanel.add(sourceTlsOptionLbl, gridBagConstraints);

        sourceTlsCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--notls1", "--tls1", "--ssl1" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        optionsPanel.add(sourceTlsCmb, gridBagConstraints);

        targetHostLbl.setText("Target Host");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 6);
        optionsPanel.add(targetHostLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 6);
        optionsPanel.add(targetHostTf, gridBagConstraints);

        targetPortLbl.setText("Target Port");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 6);
        optionsPanel.add(targetPortLbl, gridBagConstraints);

        targetPortCmb.setEditable(true);
        targetPortCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "143", "993" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 6);
        optionsPanel.add(targetPortCmb, gridBagConstraints);

        targetTlsOptionLbl.setText("Target Tls Option");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 6);
        optionsPanel.add(targetTlsOptionLbl, gridBagConstraints);

        targetTlsCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--notls1", "--tls1", "--ssl1" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        optionsPanel.add(targetTlsCmb, gridBagConstraints);

        loadCsvBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/capp/mailbox/migration/tool/csv.png"))); // NOI18N
        loadCsvBtn.setText("Load Data From CSV");
        loadCsvBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadCsvBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        optionsPanel.add(loadCsvBtn, gridBagConstraints);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 937, Short.MAX_VALUE)
                    .addComponent(listScroll)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dryRunBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startMigrationBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fastMigrationChk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(threadCountLbl1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(threadCountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(threadCountLbl2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(listScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dryRunBtn)
                    .addComponent(startMigrationBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fastMigrationChk)
                    .addComponent(threadCountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(threadCountLbl1)
                    .addComponent(threadCountLbl2))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void dryRunBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dryRunBtnActionPerformed
        LOG.info("Dry run button clicked.");
        startMigration(true);
    }//GEN-LAST:event_dryRunBtnActionPerformed

    private void startMigrationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMigrationBtnActionPerformed
        LOG.info("Start migration button clicked.");
        startMigration(false);
    }//GEN-LAST:event_startMigrationBtnActionPerformed

    private void loadCsvBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadCsvBtnActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setApproveButtonText("Load Csv");
        fileChooser.setDialogTitle("Select Csv File Dialog");
        fileChooser.setMultiSelectionEnabled(false);
        int dialogResult = fileChooser.showOpenDialog(this);
        if (JFileChooser.APPROVE_OPTION == dialogResult) {
            loadCsv(fileChooser.getSelectedFile());
        }
    }//GEN-LAST:event_loadCsvBtnActionPerformed

    private void startMigration(boolean forTest) {
        initializeExecutorService();
        var migrationList = createMigrationList(forTest);

        taskMonitor = new MigrationTaskMonitor(this, true);
        SwingUtilities.invokeLater(() -> taskMonitor.setVisible(true));

        for (MigrationDto migrationDto : migrationList) {
            var task = new MigrationTask(migrationDto);
            CompletableFuture.runAsync(task, executorService).whenComplete((v, e) -> {
                LOG.info("{} is finished.", task.getTaskName());
                task.setStatus(TaskStatus.FINISHED);
                TaskNotificationManager.getInstance().fireTaskUpdated(task);
            });
            TaskNotificationManager.getInstance().fireTaskAdded(task);
        }
    }

    private void initializeExecutorService() {
        var threadCount = Integer.parseInt(threadCountSpinner.getValue().toString());
        executorService = Executors.newFixedThreadPool(threadCount);
        LOG.info("Executor service initialized with {} thread count.", threadCount);
    }

    private List<MigrationDto> createMigrationList(boolean forTest) {
        var migrations = new ArrayList<MigrationDto>();
        MyTableModel tableModel = (MyTableModel) table.getModel();
        for (CsvModel model : tableModel.getModelList()) {
            var migrationDto = Util.convertCsvModelToMigrationDto(model);
            migrationDto
                    .setFastMigration(fastMigrationChk.isSelected())
                    .setTest(forTest)
                    .setSourceHost(sourceHostTf.getText())
                    .setSourcePort(getSelectedItemFromComboBox(sourcePortCmb))
                    .setTlsForSource(getSelectedItemFromComboBox(sourceTlsCmb))
                    .setTargetHost(targetHostTf.getText())
                    .setTargetPort(getSelectedItemFromComboBox(targetPortCmb))
                    .setTlsForTarget(getSelectedItemFromComboBox(targetTlsCmb));
            migrations.add(migrationDto);
        }
        return migrations;
    }

    private String getSelectedItemFromComboBox(JComboBox<String> comboBox) {
        return comboBox.getItemAt(comboBox.getSelectedIndex());
    }

    private void loadCsv(File file) {
        if (file == null) {
            return;
        }
        try {
            var allLines = Files.readAllLines(file.toPath());
            if (allLines.isEmpty()) {
                ErrorReporter.getInstance().report(new Exception("The Csv file is empty!"));
                return;
            }

            List<CsvModel> models = new ArrayList<>();
            for (String line : allLines) {
                if (line.isBlank()) {
                    continue;
                }
                try {
                    var model = CsvModel.parse(line);
                    models.add(model);
                } catch (Exception e) {
                    LOG.error("Error occurred while parsing csv line!", e);
                }
            }
            updateTable(models);
        } catch (IOException e) {
            ErrorReporter.getInstance().report(e);
        }
    }

    private void updateTable(List<CsvModel> models) {
        TableModel tableModel = new MyTableModel(models);
        table.setModel(tableModel);
    }

    private void addDarkModeButtonToMenuBar() {
        var btn = new JToggleButton();
        btn.setIcon(new ImageIcon(getClass().getResource("/com/capp/mailbox/migration/tool/dark-mode.png")));
        btn.putClientProperty(FlatClientProperties.BUTTON_TYPE, FlatClientProperties.BUTTON_TYPE_TOOLBAR_BUTTON);
        btn.setFocusable(false);
        btn.addActionListener(e -> {
            boolean selected = btn.isSelected();
            try {
                if (selected) {
                    UIManager.setLookAndFeel(FlatDarkLaf.class.getName());
                } else {
                    UIManager.setLookAndFeel(FlatLightLaf.class.getName());
                }
                SwingUtilities.invokeLater(() -> {
                    FlatAnimatedLafChange.showSnapshot();
                    FlatLaf.updateUI();
                    FlatAnimatedLafChange.hideSnapshotWithAnimation();
                });
            } catch (Exception ex) {
                ErrorReporter.getInstance().report(ex);
            }

        });
        menuBar.add(Box.createGlue());
        menuBar.add(btn);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dryRunBtn;
    private javax.swing.JCheckBox fastMigrationChk;
    private javax.swing.JButton loadCsvBtn;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JTextField sourceHostTf;
    private javax.swing.JComboBox<String> sourcePortCmb;
    private javax.swing.JComboBox<String> sourceTlsCmb;
    private javax.swing.JButton startMigrationBtn;
    private javax.swing.JTable table;
    private javax.swing.JTextField targetHostTf;
    private javax.swing.JComboBox<String> targetPortCmb;
    private javax.swing.JComboBox<String> targetTlsCmb;
    private javax.swing.JSpinner threadCountSpinner;
    // End of variables declaration//GEN-END:variables

    private static final class MyTableModel extends AbstractTableModel {

        private final List<CsvModel> models;
        private final String[] columns = new String[]{"Source User", "Source Admin", "Source Password",
            "Target User", "Target Admin", "Target Password"};

        public MyTableModel(List<CsvModel> models) {
            this.models = models;
        }

        public List<CsvModel> getModelList() {
            return models;
        }

        @Override
        public int getRowCount() {
            return models.size();
        }

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public String getColumnName(int column) {
            return columns[column];
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            CsvModel model = models.get(rowIndex);
            switch (columnIndex) {
                case 0 -> {
                    return model.sourceUser();
                }
                case 1 -> {
                    return model.sourceAdmin();
                }
                case 2 -> {
                    return model.sourcePassword();
                }
                case 3 -> {
                    return model.targetUser();
                }
                case 4 -> {
                    return model.targetAdmin();
                }
                case 5 -> {
                    return model.targetPassword();
                }
            }
            return null;
        }

    }
}
