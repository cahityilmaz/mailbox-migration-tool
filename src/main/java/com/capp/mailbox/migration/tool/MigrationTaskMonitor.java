package com.capp.mailbox.migration.tool;

import static com.capp.mailbox.migration.tool.TaskNotificationManager.TASK_ADDED_PROPERTY;
import static com.capp.mailbox.migration.tool.TaskNotificationManager.TASK_UPDATED_PROPERTY;
import java.awt.Color;
import java.awt.Component;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author mucahit.yilmaz
 */
public class MigrationTaskMonitor extends javax.swing.JDialog implements PropertyChangeListener {

    /**
     * Creates new form NewJDialog
     */
    public MigrationTaskMonitor(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        TaskNotificationManager.getInstance().addListener(MigrationTaskMonitor.this);
        table.getColumnModel().getColumn(1).setCellRenderer(new StatusColumnRenderer());
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        String propertyName = evt.getPropertyName();
        switch (propertyName) {
            case TASK_ADDED_PROPERTY ->
                handleTaskAddedEvent((MigrationTask) evt.getNewValue());
            case TASK_UPDATED_PROPERTY ->
                handleTaskUpdatedEvent((MigrationTask) evt.getNewValue());
        }
    }

    private void handleTaskAddedEvent(MigrationTask task) {
        TaskModel model = (TaskModel) table.getModel();
        model.addTask(task);
    }

    private void handleTaskUpdatedEvent(MigrationTask task) {
        TaskModel model = (TaskModel) table.getModel();
        model.updateTask(task);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Task Monitor");
        setPreferredSize(new java.awt.Dimension(700, 800));

        table.setModel(new TaskModel());
        scrollPane.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table.getColumnModel().getColumn(1).setPreferredWidth(150);
        table.getColumnModel().getColumn(1).setMaxWidth(150);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    private static final class TaskModel extends AbstractTableModel {

        private final List<MigrationTask> models;
        private final String[] columns = new String[]{"Task Name", "Task Status"};

        public TaskModel() {
            this.models = new ArrayList<>();
        }

        public List<MigrationTask> getModelList() {
            return models;
        }

        public void addTask(MigrationTask task) {
            models.add(task);
            fireTableDataChanged();
        }

        public void updateTask(MigrationTask task) {
            int i = models.indexOf(task);
            models.remove(i);
            models.add(i, task);
            fireTableDataChanged();
        }

        @Override
        public int getRowCount() {
            return models.size();
        }

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public String getColumnName(int column) {
            return columns[column];
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            MigrationTask model = models.get(rowIndex);
            switch (columnIndex) {
                case 0 -> {
                    return model.getTaskName();
                }
                case 1 -> {
                    return model.getTaskStatus();
                }
            }
            return null;
        }

    }

    private static class StatusColumnRenderer extends DefaultTableCellRenderer {

        public StatusColumnRenderer() {
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                                                       boolean hasFocus, int row, int column) {
            JLabel comp = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            if (column == 1) {
                comp.setHorizontalAlignment(SwingConstants.CENTER);
                if (TaskStatus.RUNNING.equals(value)) {
                    comp.setForeground(Color.red);
                } else if (TaskStatus.QUEUED.equals(value)) {
                    comp.setForeground(Color.blue);
                } else if (TaskStatus.FINISHED.equals(value)) {
                    comp.setForeground(Color.decode("#399918"));
                }
            }
            if (isSelected) {
                comp.setForeground(table.getSelectionForeground());
            }
            return comp;
        }
    }

}
